// Code generated by mockery v2.23.0. DO NOT EDIT.

package tzrpcbackendmocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	rpc "blockwatch.cc/tzgo/rpc"

	tezos "blockwatch.cc/tzgo/tezos"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Do provides a mock function with given fields: req, v
func (_m *Backend) Do(req *http.Request, v interface{}) error {
	ret := _m.Called(req, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) error); ok {
		r0 = rf(req, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoAsync provides a mock function with given fields: req, mon
func (_m *Backend) DoAsync(req *http.Request, mon rpc.Monitor) error {
	ret := _m.Called(req, mon)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, rpc.Monitor) error); ok {
		r0 = rf(req, mon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, urlpath, result
func (_m *Backend) Get(ctx context.Context, urlpath string, result interface{}) error {
	ret := _m.Called(ctx, urlpath, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, urlpath, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAsync provides a mock function with given fields: ctx, urlpath, mon
func (_m *Backend) GetAsync(ctx context.Context, urlpath string, mon rpc.Monitor) error {
	ret := _m.Called(ctx, urlpath, mon)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, rpc.Monitor) error); ok {
		r0 = rf(ctx, urlpath, mon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContractBalance provides a mock function with given fields: ctx, addr, id
func (_m *Backend) GetContractBalance(ctx context.Context, addr tezos.Address, id rpc.BlockID) (tezos.Z, error) {
	ret := _m.Called(ctx, addr, id)

	var r0 tezos.Z
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tezos.Address, rpc.BlockID) (tezos.Z, error)); ok {
		return rf(ctx, addr, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tezos.Address, rpc.BlockID) tezos.Z); ok {
		r0 = rf(ctx, addr, id)
	} else {
		r0 = ret.Get(0).(tezos.Z)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tezos.Address, rpc.BlockID) error); ok {
		r1 = rf(ctx, addr, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeadBlock provides a mock function with given fields: ctx
func (_m *Backend) GetHeadBlock(ctx context.Context) (*rpc.Block, error) {
	ret := _m.Called(ctx)

	var r0 *rpc.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rpc.Block, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rpc.Block); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRequest provides a mock function with given fields: ctx, method, urlStr, body
func (_m *Backend) NewRequest(ctx context.Context, method string, urlStr string, body interface{}) (*http.Request, error) {
	ret := _m.Called(ctx, method, urlStr, body)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) (*http.Request, error)); ok {
		return rf(ctx, method, urlStr, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *http.Request); ok {
		r0 = rf(ctx, method, urlStr, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, method, urlStr, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, urlpath, body, result
func (_m *Backend) Post(ctx context.Context, urlpath string, body interface{}, result interface{}) error {
	ret := _m.Called(ctx, urlpath, body, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, urlpath, body, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, urlpath, body, result
func (_m *Backend) Put(ctx context.Context, urlpath string, body interface{}, result interface{}) error {
	ret := _m.Called(ctx, urlpath, body, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, urlpath, body, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackend(t mockConstructorTestingTNewBackend) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
